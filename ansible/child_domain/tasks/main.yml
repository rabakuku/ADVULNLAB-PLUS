- name: "Set configure dns to {{dns_domain}}"
  win_dns_client:
    adapter_names: "{{domain_adapter}}"
    ipv4_addresses:
    - "{{dns_domain}}"
    log_path: C:\dns_log.txt

# - name: "Add member server to {{parent_domain}}"
#   win_domain_membership:
#     dns_domain_name: "{{parent_domain}}"
#     domain_admin_user: "Administrator@{{parent_domain}}"
#     domain_admin_password: "{{password}}"
#     state: domain
#   register: domain_state
# 
# - name: Reboot if needed
#   win_reboot:
#   when: domain_state.reboot_required

- name: Install windows features - AD Domain Services
  win_feature:
    name: AD-Domain-Services
    state: present
    include_management_tools: yes
  register: features

- name: Install windows features - RSAT-ADDS
  win_feature:
    name: RSAT-ADDS
    state: present
    include_management_tools: yes
  register: features

#- name: Create directory
#  win_file:
#    path: "C:\\ansible"
#    state: directory
#
#- name: template file to remote host
#  template:
#    src: "child_domain.ps1.j2"
#    dest: "c:\\ansible\\child_domain.ps1"
#
#- name: get file stat to be able to perform a check in the following task
#  local_action: stat path=c:\\ansible\\child_domain.log
#  register: domain_child_log

#- name: Add child domain to parent domain
#  win_shell: c:\\ansible\\child_domain.ps1 > c:\\ansible\\child_domain.log
#  become: yes
#  become_method: runas
#  become_user: "newyork\\Administrator"
#  vars:
#    ansible_become_pass: "{{password}}"
#  when: not domain_child_log.stat.exists

- name: "disable interface {{nat_adapter}} before join domain"
  win_shell: netsh interface set interface "{{nat_adapter}}" disable

- name: add child domain to parent domain
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $Password,

          [String]
          $DomainAdmin,

          [String]
          $ParentDomainName,

          [String]
          $NewDomainNetbiosName,

          [String]
          $ReplicationSourceDC,

          [String]
          $NewDomainName,

          [String]
          $DomSafePassword
      )
      try {
          $child_domain = Get-ADDomain -Identity $NewDomainName
          $domainExist=$true
      } catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException] {
          $domainExist=$false
      }
      if (-not $domainExist) {
        $Ansible.Changed = $true
        $pass = ConvertTo-SecureString $Password -AsPlainText -Force
        $Cred = New-Object System.Management.Automation.PSCredential ($DomainAdmin, $pass)
        $safePassword = ConvertTo-SecureString $DomSafePassword -AsPlainText -Force
        Install-ADDSDomain -Credential $Cred -SkipPreChecks -NewDomainName $NewDomainName -NewDomainNetbiosName $NewDomainNetbiosName -ParentDomainName $ParentDomainName -ReplicationSourceDC $ReplicationSourceDC -DatabasePath "C:\Windows\NTDS" -SYSVOLPath "C:\Windows\SYSVOL" -LogPath "C:\Windows\Logs" -SafeModeAdministratorPassword $safePassword -Force -NoRebootOnCompletion
      } else {
        $Ansible.Changed = $false
      }
    parameters:
      Password: "{{parent_domain_password}}"
      DomSafePassword: "{{domain_password}}"
      DomainAdmin: "Administrator@{{parent_domain}}"
      ParentDomainName: "{{parent_domain}}"
      ReplicationSourceDC: "{{source_dc}}" 
      NewDomainNetbiosName: "{{netbios_name}}"
      NewDomainName: "{{domain.split('.')[0]}}"
  register:
    child_result

- name: Reboot
  win_reboot:
    reboot_timeout: 900
    post_reboot_delay: 100
  when: child_result.changed

- name: "enable interface {{nat_adapter}} after domain joined"
  win_shell: netsh interface set interface "{{nat_adapter}}" enable
  register: enable_interface
  until: "enable_interface is not failed"
  retries: 3
  delay: 120

- name: "Install XactiveDirectory"
  win_psmodule:
    name: ActiveDirectoryDSC
    state: present
